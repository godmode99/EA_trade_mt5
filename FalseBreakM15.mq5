//+------------------------------------------------------------------+
//|                                                       FalseBreakM15.mq5 |
//|     Generated by ChatGPT                                           |
//+------------------------------------------------------------------+
#property strict
#property copyright ""
#property link      ""

#include "lib/SessionFilters.mqh"
#include "lib/RiskManagement.mqh"
#include "lib/SetupDetection.mqh"

input double riskPerTradePct       = 1.0;
input double rr                    = 2.0;
input int    utcOffsetHours        = 0;
input int    minPrevDayRangePoints = 500;
input int    maxSpreadPoints       = 30;
input bool   enableBlackout        = true;
input string blackoutWindows       = "22:00-23:59";
input int    slippagePoints        = 5;

datetime g_lastBarTime = 0;

int OnInit()
  {
   if(!SymbolSelect(_Symbol,true))
     {
      Print("Failed to subscribe to symbol ",_Symbol);
      return(INIT_FAILED);
     }

   if(!ChartSetSymbolPeriod(0,_Symbol,PERIOD_M15))
     {
      Print("Failed to set chart to M15 for symbol ",_Symbol);
     }

   g_lastBarTime = 0;
   return(INIT_SUCCEEDED);
  }

void OnTick()
  {
   datetime currentBarTime = iTime(_Symbol,PERIOD_M15,0);
   if(currentBarTime == 0)
      return;

   if(currentBarTime == g_lastBarTime)
      return;

   g_lastBarTime = currentBarTime;

   if(!IsTradingAllowed(utcOffsetHours,enableBlackout,blackoutWindows))
      return;

   double ask = 0.0;
   double bid = 0.0;
   if(!SymbolInfoDouble(_Symbol,SYMBOL_ASK,ask) || !SymbolInfoDouble(_Symbol,SYMBOL_BID,bid))
      return;

   double spreadPoints = (ask - bid) / _Point;
   if(spreadPoints > maxSpreadPoints)
      return;

   double prevDayRangePoints = GetPreviousDayRangePoints(_Symbol,utcOffsetHours);
   if(prevDayRangePoints < minPrevDayRangePoints)
      return;

   double volume = CalculatePositionSize(_Symbol,riskPerTradePct,prevDayRangePoints);
   if(volume <= 0.0)
      return;

   if(!DetectFalseBreakSetup(_Symbol,PERIOD_M15,rr,prevDayRangePoints))
      return;

   SubmitFalseBreakOrder(_Symbol,PERIOD_M15,volume,rr,slippagePoints);
  }

void OnDeinit(const int reason)
  {
  }
